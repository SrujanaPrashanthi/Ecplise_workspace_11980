package java8features;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
//import java.util.function.BinaryOperator;
import java.util.stream.Collectors;

public class StreamPipeLineDemo {

	public static void main(String[] args) {
		List<Integer> salaries = Arrays.asList(50000,40000,20000,30000,60000);
		System.out.println(salaries);
		
		double totalSalary = salaries.stream()
	 	.filter((salary) -> salary >= 50000)//predicate as argument and expression should be boolean. based on the return type we need to write the condition
	 	.mapToDouble((salary) -> salary)
	 	.map(salary -> salary + salary* 1.10)
	 	.sum();
		System.out.println(totalSalary);
		
		List<Integer> incrementSalary1 = salaries.stream() //source
			 	.filter((salary) -> salary <= 50000) //Intermediate operation-1
			 	.sorted(Comparator.reverseOrder())//intermediate operation-2 
			 	.toList();
		System.out.println(incrementSalary1);
		
		List<Integer> number = Arrays.asList(1,3,2,4,3,1,2);
		System.out.println(number);
		
		List<Integer> num1 = number.stream()
				.distinct()
				.sorted(Comparator.reverseOrder())
				.toList();
		System.out.println(num1);
		
		List<String> word = Arrays.asList("JAVA");
		System.out.println(word);
		
		String word1 = ((CharSequence) word).chars()
				.mapToObj(c -> String.valueOf((char) c))  // Convert to Stream<String>
                .collect(Collectors.joining(" "));
		System.out.println(word1);
		
	
				
		
		
			
		

	}

}
