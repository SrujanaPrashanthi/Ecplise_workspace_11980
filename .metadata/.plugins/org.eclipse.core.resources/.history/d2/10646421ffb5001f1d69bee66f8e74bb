package java8features;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.function.BinaryOperator;

public class StreamPipeLineDemo {

	public static void main(String[] args) {
		List<Integer> salaries = Arrays.asList(50000,40000,20000,30000,60000);
		//System.out.println(salaries);
		
		double totalSalary = salaries.stream()
	 	.filter(salary -> salary >= 50000)//predicate as argument and expression should be boolean. based on the return type we need to write the condition
	 	.mapToDouble((salary) -> salary)
	 	.map(salary -> salary + salary* 1.10)
	 	.sum();
		System.out.println(totalSalary);
		//.toList();
		
		/*List<Integer> filtersalary = salaries.stream()
				.filter(salary -> salary >=5000)
				.toList();
		System.out.println(filtersalary);
		
		List<Double> incrementedsalary = salaries.stream()
                .map(salary -> salary * 1.10)  // Increment by 10%
                .toList();
		System.out.println(incrementedsalary);
		
		int totalSalary =  salaries.stream()
				.mapToInt((salary) -> salary)
				.sum();
		System.out.println(totalSalary);*/
		
		List<Integer> incrementSalary1 = salaries.stream() //source
			 	.filter(salary -> salary <= 50000) //Intermediate operation-1
			 	.sorted(Comparator.reverseOrder())//intermediate operation-2 
			 	.toList();
		System.out.println(incrementSalary1);
		
	
				
		
		
			
		

	}

}
